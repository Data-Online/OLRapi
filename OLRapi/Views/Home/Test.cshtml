
@{
    ViewBag.Title = "Test";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Test</h2>


<div data-ng-app="app" data-ng-controller="demoCtrl">

    <div class="col-sm-6">
        <form name="joinForm" ng-submit="join()">
            <auto:fields fields="schema" data="user" options="options"></auto:fields>
            <button type="submit" class="btn btn-default btn-lg btn-block" ng-class="{'btn-primary':joinForm.$valid}" tabindex="100">Join</button>
        </form>
    </div>
    <div class="col-sm-6">
        <h4>Bound Data</h4>
        {{displayEmail}} {{user.fieldTrip1}}
        <pre ng-bind="user | json"></pre>

        @*<select class="form-control" ng-model="Data.firstType" ng-options="item.value for item in items"></select>
            <select class="form-control" ng-model="Data.SecondType" ng-options="item.value for item in items | filter : exclude"></select>*@

        <h4>Demo Functions</h4>
        <button class="btn btn-default" ng-click="addField()">Add Field</button>
        <button class="btn btn-default" ng-click="toggleValidation()">Toggle Validation</button>
        <button class="btn btn-default" ng-click="togglePopovers()">Toggle Popovers</button>
        <button class="btn btn-default" ng-click="toggleHorizontal()">Toggle Horizontal</button>
    </div>

</div>

<script src="~/Scripts/angular.js"></script>
<script src="~/Scripts/angular-ui/ui-bootstrap.js"></script>
<script type="text/javascript" src="~/Scripts/autofields.js"></script>
<!-- With Bootstrap -->
<script type="text/javascript" src="~/Scripts/autofields-bootstrap.js"></script>


<script>
    angular.module('app', ['autofields'])
        .controller('demoCtrl', ['$scope', '$log', 'registrationDataSource', function ($scope, $log, registrationDataSource) {
            $scope.user = {
                username: '',
                email: 'test@test.com',
                gender: null,
                genderCheck: null,
                bio: '',
                website: '',
                number: 1,
                //birthdate: new Date(),
                password: '',
                confirmPassword: '',
                rememberMe: false,
                PSNZMember: false,
                NZIPPMember: false,
                PSNZMemberAppliedFor: false,
                fieldTrip1Choice1: null,
                fieldTrip1Choice2: null,
                fieldTrip1Choice3: null

            };


            $scope.schema = [
                { property: 'username', type: 'text', attr: { ngMinlength: 4, required: true }, msgs: { minlength: 'Needs to have at least 4 characters' } },
                //{ property: 'email', type: 'email', help: 'Don\'t worry we won\'t spam your inbox', attr: { required: true, ngMinlength: 4 }, msgs: { required: 'You need an email address', email: 'Email address needs to be valid', valid: 'Nice email address!' } },
                { property: 'website', type: 'url', msgs: { url: 'You need a valid url' } },
                { property: 'number', label: 'Number between 1-10', type: 'number', attr: { min: 1, max: 10 }, msgs: { min: 'You need a number no less than 1', max: 'You need a number no greater than 10' }, validate: false },
                //{ property: 'birthdate', type: 'date', attr: { required: true } },
                { property: 'gender', type: 'select', list: 'key as value for (key,value) in genders', attr: { required: true } },
                { property: 'genderCheck', label: 'Are you really?', type: 'select', list: 'key as value for (key,value) in genderCheck', attr: { required: true, ngShow: '$data.gender != null' } },
                { property: 'bio', type: 'textarea', rows: 5, placeholder: 'A bit about yourself...', attr: { required: true } },
                {
                    type: 'multiple', fields: [
                        { property: 'password', type: 'password', attr: { required: true, ngMinlength: 6 } },
                        { property: 'confirmPassword', label: 'Confirm Password', type: 'password', attr: { confirmPassword: 'user.password', required: true, ngMinlength: 6 }, msgs: { match: 'Your passwords need to match' } }
                    ], columns: 6
                },
                { property: 'rememberMe', label: 'Stay signed in', type: 'checkbox' },
                {
                    type: 'multiple', fields: [
                        { property: 'PSNZMember', label: 'PSNZ Member', type: 'checkbox' },
                        { property: 'NZIPPMember', label: 'NZIPP Member', type: 'checkbox' },
                        { property: 'PSNZMemberAppliedFor', label: 'PSNZ Membership applied for', type: 'checkbox' }
                    ], columns: 6
                },
                {
                    type: 'multiple', fields: [
                        { property: 'fieldTrip1Choice1', type: 'select', list: 'key as value for (key,value) in fieldTrip1Options', attr: { required: false } },
                        { property: 'fieldTrip1Choice2', type: 'select', list: 'key as value for (key,value) in excludeItems1(fieldTrip1Options)', attr: { required: false } },
                        { property: 'fieldTrip1Choice3', type: 'select', list: 'key as value for (key,value) in excludeItems2(fieldTrip1Options)', attr: { required: false } }
                    ], columns: 6
                }

            ];

            $scope.excludeItems1 = function (itemList) {
                var result = {};
                angular.forEach(itemList, function (value, key) {
                    if (!angular.isUndefinedOrNull($scope.user.fieldTrip1Choice1)) {
                        if (!angular.equals(value,$scope.fieldTrip1Options[$scope.user.fieldTrip1Choice1])) {
                            result[key] = value;
                        }
                    }
                });

                return result;
            };

            $scope.excludeItems2 = function (itemList) {
                var result = {};
                angular.forEach(itemList, function (value, key) {
                    if (!angular.isUndefinedOrNull($scope.user.fieldTrip1Choice2)) {
                        if (!angular.equals(value, $scope.fieldTrip1Options[$scope.user.fieldTrip1Choice1]) & !angular.equals(value, $scope.fieldTrip1Options[$scope.user.fieldTrip1Choice2])) {
                            result[key] = value;
                        }
                    }
                });

                return result;
            };

            angular.isUndefinedOrNull = function (val) {
                return angular.isUndefined(val) || val === null
            }

            $scope.options = {
                validation: {
                    enabled: true,
                    showMessages: false
                },
                layout: {
                    type: 'basic',
                    labelSize: 3,
                    inputSize: 9
                }
            };

            $scope.genders = {
                0: 'Male',
                1: 'Female'
            };

            $scope.genderCheck = {
                0: 'No',
                1: 'Yes'
            };

            $scope.toggleValidation = function () {
                $scope.options.validation.enabled = !$scope.options.validation.enabled;
            };

            $scope.togglePopovers = function () {
                $scope.options.validation.showMessages = !$scope.options.validation.showMessages;
            };

            $scope.toggleHorizontal = function () {
                $scope.options.layout.type = $scope.options.layout.type == 'horizontal' ? 'basic' : 'horizontal';
            }

            ////$scope.addField = function () {
            ////    $scope.schema.push({ property: 'new' + (new Date().getTime()), label: 'New Field' });
            ////};

            $scope.join = function () {
                if (!$scope.joinForm.$valid) return;
                //join stuff....
                $log.info($scope.user);
                alert('You\'ve joined!\n\nSee console for additional info.');
            }

            $log.info("TEST");

            var testRead = function () {
                registrationDataSource.getRegistrationTemplate()
                    .then(bindData, onError);
            };

            var testWrite = function (data) {
                registrationDataSource.saveRegistrationDetails(data);
            }

            var bindData = function (data) {
                $log.info("Data;");
                $log.info(data);
                $log.info(data.email);
                $scope.user = data;
                $scope.displayEmail = data.email;
                testWrite($scope.user);
                $scope.fieldTrip1Options = data.fieldTrip1.options;
                //$scope.items = data.fieldTrip1Options.options;
                $log.info($scope.fieldTrip1Options);

            }

            var onError = function () {
                $log.error("Error");
            }

            $scope.addField = function () {
                testRead();
            };

        }])
        .directive('confirmPassword', [function () {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function (scope, element, attrs, ngModel) {
                    var validate = function (viewValue) {
                        var password = scope.$eval(attrs.confirmPassword);
                        ngModel.$setValidity('match', ngModel.$isEmpty(viewValue) || viewValue == password);
                        return viewValue;
                    }
                    ngModel.$parsers.push(validate);
                    scope.$watch(attrs.confirmPassword, function (value) {
                        validate(ngModel.$viewValue);
                    })
                }
            }
        }]);
</script>


<script src="~/App/registration.data.js"></script>


